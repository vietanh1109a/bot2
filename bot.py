import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
import requests
import json
import re
import datetime
# C·∫•u h√¨nh logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# Bot Token 
TOKEN = "8061781080:AAGmr62iGl_cUjLrdxzAPpxiV4ZB-Rxqt5o"

# API URL
TIKTOK_API_URL = "https://hoangkhiemtruong.cameraddns.net/tiktok/info.php?username="
TIKTOK_VIDEO_API_URL = "https://hoangkhiemtruong.cameraddns.net/tiktok/video.php?url="
TIKTOK_FOLLOW_API_URL = "https://hoangkhiemtruong.cameraddns.net/hoangkhiem/follow.php?username="
FREEFIRE_OUTFIT_API_URL = "https://marcoxirotech-outfit.vercel.app/api?region=vn&uid="
FREEFIRE_API_KEY = "MARCOxIROTECH"
# Th√™m h·∫±ng s·ªë n√†y ·ªü ƒë·∫ßu file c√πng v·ªõi c√°c h·∫±ng s·ªë kh√°c
ALLOWED_GROUP_ID = -1002549023293  # Thay b·∫±ng ID nh√≥m th·ª±c t·∫ø c·ªßa b·∫°n

# T·∫°o h√†m ki·ªÉm tra xem tin nh·∫Øn c√≥ ƒë·∫øn t·ª´ nh√≥m ƒë∆∞·ª£c ph√©p kh√¥ng
async def check_authorized_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Ki·ªÉm tra xem l·ªánh c√≥ ƒë·∫øn t·ª´ nh√≥m ƒë∆∞·ª£c ph√©p kh√¥ng"""
    chat_id = update.effective_chat.id
    
    if chat_id != ALLOWED_GROUP_ID:
        await update.message.reply_text("‚ö†Ô∏è Bot n√†y ch·ªâ ho·∫°t ƒë·ªông trong nh√≥m ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh. üîí\n Nh√≥m tele: t.me/vmod123z")
        return False
    return True

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """G·ª≠i tin nh·∫Øn khi l·ªánh /start ƒë∆∞·ª£c d√πng."""
    if not await check_authorized_group(update, context):
        return
    
    await update.message.reply_text(
        'ü§ñ Ch√†o M·ª´ng ƒë·∫øn v·ªõi VMOD bot!!!\n\n'

        'üìã S·ª≠ d·ª•ng c√°c l·ªánh sau:\n\n'

        'üìä /infotiktok:  L·∫•y th√¥ng tin t√†i kho·∫£n TikTok\n'
        'üé¨ /videotiktok:  L·∫•y th√¥ng tin video TikTok\n'
        'üë• /fl:  TƒÉng follow cho t√†i kho·∫£n TikTok\n'
        'üëó /tpff:  L·∫•y ·∫£nh trang ph·ª•c Free Fire\n'
        'üëÅÔ∏è /viewff:  TƒÉng l∆∞·ª£t xem cho t√†i kho·∫£n Free Fire\n'
        'üì± /fb:  L·∫•y th√¥ng tin t√†i kho·∫£n Facebook\n'
        'üéÆ /infoff:  L·∫•y th√¥ng tin t√†i kho·∫£n Free Fire\n'
        'ü§ù /addfr:  Spam k·∫øt b·∫°n Free Fire'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """G·ª≠i tin nh·∫Øn khi l·ªánh /help ƒë∆∞·ª£c d√πng."""
    if not await check_authorized_group(update, context):
        return
    await update.message.reply_text(
        'S·ª≠ d·ª•ng c√°c l·ªánh sau:\n\n'
        '1. L·∫•y th√¥ng tin t√†i kho·∫£n TikTok:\n'
        '/infotiktok @username ho·∫∑c /infotiktok username\n'
        'V√≠ d·ª•: /infotiktok vietlegendc\n\n'
        '2. L·∫•y th√¥ng tin video TikTok:\n'
        '/videotiktok URL\n'
        'V√≠ d·ª•: /videotiktok https://www.tiktok.com/@bomaydeptraibomaycoquyen/video/7483809457726704914\n\n'
        '3. TƒÉng follow cho t√†i kho·∫£n TikTok:\n'
        '/fl username\n'
        'V√≠ d·ª•: /fl vietlegendc\n\n'
        '4. L·∫•y ·∫£nh trang ph·ª•c Free Fire:\n'
        '/tpff uid\n'
        'V√≠ d·ª•: /tpff 833822096\n\n'
        '5. TƒÉng l∆∞·ª£t xem cho t√†i kho·∫£n Free Fire:\n'
        '/viewff uid\n'
        'V√≠ d·ª•: /viewff 833822096\n\n'
        '6. L·∫•y th√¥ng tin t√†i kho·∫£n Facebook:\n'
        '/fb link\n'
        'V√≠ d·ª•: /fb https://www.facebook.com/VietLegendc\n'
        '7. Check th√¥ng tin t√†i kho·∫£n Free Fire:\n'
        '/infoff uid\n'
        'V√≠ d·ª•: /infoff 833822096\n\n'
        '8. Spam k·∫øt b·∫°n Free Fire:\n'
        '/addfr uid\n'
        'v√≠ d·ª• /addfr 833822096\n\n'
    )

async def get_tiktok_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """L·∫•y v√† hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng TikTok."""
    if not await check_authorized_group(update, context):
        return
    try:
        # L·∫•y username t·ª´ tin nh·∫Øn
        if not context.args:
            await update.message.reply_text("Vui l√≤ng cung c·∫•p username TikTok. V√≠ d·ª•: /infotiktok vietlegendc")
            return

        # L·∫•y username v√† x√≥a @ n·∫øu c√≥
        username = context.args[0].replace('@', '')
        
        # Th√¥ng b√°o ƒëang x·ª≠ l√Ω
        processing_msg = await update.message.reply_text(f"ƒêang l·∫•y th√¥ng tin cho {username}...")
        
        # G·ª≠i request ƒë·∫øn API
        response = requests.get(f"{TIKTOK_API_URL}{username}")
        
        # Ki·ªÉm tra response
        if response.status_code != 200:
            await update.message.reply_text(f"L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API. M√£ l·ªói: {response.status_code}")
            await processing_msg.delete()
            return
        
        # Parse JSON
        try:
            data = response.json()
        except json.JSONDecodeError:
            await update.message.reply_text("L·ªói: API tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá")
            await processing_msg.delete()
            return
        
        # Ki·ªÉm tra n·∫øu data kh√¥ng ph·∫£i l√† dictionary
        if not isinstance(data, dict):
            await update.message.reply_text("L·ªói: API tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng")
            await processing_msg.delete()
            return
        
        # Ki·ªÉm tra n·∫øu request th√†nh c√¥ng
        if data.get("code") != 0:
            error_msg = data.get('msg', 'Kh√¥ng t√¨m th·∫•y th√¥ng tin')
            
            # Ki·ªÉm tra l·ªói Free API Limit
            if "Free Api Limit" in error_msg:
                await update.message.reply_text("Vui l√≤ng nh·∫≠p ƒë√∫ng l·ªánh v√† th·ª≠ l·∫°i sau √≠t gi√¢y.")
            else:
                # Ki·ªÉm tra l·ªói sai ƒë·ªãnh d·∫°ng username
                if "User not found" in error_msg or "user not exist" in error_msg:
                    await update.message.reply_text(f"L·ªói: Username '{username}' kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i v√† nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng username TikTok.")
                else:
                    await update.message.reply_text(f"L·ªói: {error_msg}")
            
            await processing_msg.delete()
            return
        
        # L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
        user_data = data.get("data", {}).get("user", {})
        stats_data = data.get("data", {}).get("stats", {})
        
        # ƒê·∫£m b·∫£o user_data v√† stats_data l√† dictionary
        if not isinstance(user_data, dict):
            user_data = {}
        if not isinstance(stats_data, dict):
            stats_data = {}
        
        # T·∫°o tin nh·∫Øn th√¥ng tin c∆° b·∫£n
        info_message = (
            f"üìä TH√îNG TIN TIKTOK üìä\n\n"
            f"üë§ Nickname: {user_data.get('nickname', 'N/A')}\n"
            f"üÜî ID: {user_data.get('id', 'N/A')}\n"
            f"üë®‚Äçüíª Username: @{user_data.get('uniqueId', 'N/A')}\n"
            f"üìù Ti·ªÉu s·ª≠: {user_data.get('signature', 'Kh√¥ng c√≥ ti·ªÉu s·ª≠')}\n"
            f"‚úÖ ƒê√£ x√°c minh: {'C√≥' if user_data.get('verified') else 'Kh√¥ng'}\n"
            f"üîí T√†i kho·∫£n ri√™ng t∆∞: {'C√≥' if user_data.get('privateAccount') else 'Kh√¥ng'}\n"
        )
        
        # Th√™m th√¥ng tin v·ªÅ t√†i kho·∫£n m·∫°ng x√£ h·ªôi li√™n k·∫øt
        social_message = (
            f"\nüîó M·∫†NG X√É H·ªòI LI√äN K·∫æT üîó\n"
            f"üì∏ Instagram: {user_data.get('ins_id') if user_data.get('ins_id') else 'Kh√¥ng li√™n k·∫øt'}\n"
            f"üê¶ Twitter: {user_data.get('twitter_id') if user_data.get('twitter_id') else 'Kh√¥ng li√™n k·∫øt'}\n"
        )
        
        # Th√™m th√¥ng tin v·ªÅ k√™nh YouTube n·∫øu c√≥
        youtube_message = ""
        if user_data.get('youtube_channel_id') or user_data.get('youtube_channel_title'):
            youtube_message = (
                f"üì∫ YouTube: {user_data.get('youtube_channel_title', 'Kh√¥ng c√≥ t√™n')}\n"
                f"üì∫ ID YouTube: {user_data.get('youtube_channel_id', 'Kh√¥ng c√≥ ID')}\n"
            )
        
        # Th√™m th√¥ng tin th·ªëng k√™
        stats_message = (
            f"\nüìà TH·ªêNG K√ä üìà\n"
            f"üë• ƒêang theo d√µi: {stats_data.get('followingCount', 0):,}\n"
            f"üë• Ng∆∞·ªùi theo d√µi: {stats_data.get('followerCount', 0):,}\n"
            f"‚ù§Ô∏è T·ªïng l∆∞·ª£t th√≠ch: {stats_data.get('heartCount', 0):,}\n"
            f"üé¨ S·ªë video: {stats_data.get('videoCount', 0):,}\n"
            f"üëç L∆∞·ª£t th√≠ch: {stats_data.get('diggCount', 0):,}\n"
        )
        
        # K·∫øt h·ª£p t·∫•t c·∫£ th√¥ng tin
        full_message = info_message + social_message + youtube_message + stats_message
        
        # Th√™m th√¥ng tin v·ªÅ th·ªùi gian x·ª≠ l√Ω API
        full_message += f"\n‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω: {data.get('processed_time', 'N/A')} gi√¢y"
        
        # N·∫øu c√≥ avatar, g·ª≠i ·∫£nh k√®m theo text
        avatar_url = user_data.get('avatarLarger')
        if avatar_url:
            # Ki·ªÉm tra ƒë·ªô d√†i caption, n·∫øu qu√° d√†i th√¨ chia nh·ªè tin nh·∫Øn
            if len(full_message) > 1024:  # Telegram gi·ªõi h·∫°n caption t·ªëi ƒëa 1024 k√Ω t·ª±
                await update.message.reply_photo(
                    photo=avatar_url,
                    caption=info_message[:1024]  # G·ª≠i ph·∫ßn ƒë·∫ßu v·ªõi ·∫£nh
                )
                # G·ª≠i ph·∫ßn c√≤n l·∫°i l√† text ri√™ng
                remaining_message = social_message + youtube_message + stats_message
                await update.message.reply_text(remaining_message)
            else:
                await update.message.reply_photo(
                    photo=avatar_url,
                    caption=full_message
                )
        else:
            # N·∫øu kh√¥ng c√≥ avatar, g·ª≠i to√†n b·ªô d∆∞·ªõi d·∫°ng text
            await update.message.reply_text(full_message)
        
        # X√≥a tin nh·∫Øn ƒëang x·ª≠ l√Ω
        await processing_msg.delete()
        
    except Exception as e:
        logging.error(f"Error: {str(e)}")
        await update.message.reply_text(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
        if processing_msg:
            await processing_msg.delete()

async def get_tiktok_video_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """L·∫•y v√† hi·ªÉn th·ªã th√¥ng tin video TikTok."""
    if not await check_authorized_group(update, context):
        return
    try:
        # L·∫•y URL t·ª´ tin nh·∫Øn
        if not context.args:
            await update.message.reply_text("Vui l√≤ng cung c·∫•p URL video TikTok.\n V√≠ d·ª•: /videotiktok https://www.tiktok.com/@bomaydeptraibomaycoquyen/video/7483809457726704914")
            return

        # L·∫•y URL video
        video_url = context.args[0]
        
        # Ki·ªÉm tra URL c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng TikTok kh√¥ng
        if not re.search(r'(tiktok\.com|douyin\.com)', video_url):
            await update.message.reply_text("URL kh√¥ng h·ª£p l·ªá. Vui l√≤ng cung c·∫•p URL TikTok h·ª£p l·ªá.")
            return
        
        # Th√¥ng b√°o ƒëang x·ª≠ l√Ω
        processing_msg = await update.message.reply_text("ƒêang l·∫•y th√¥ng tin video...")
        
        # G·ª≠i request ƒë·∫øn API
        response = requests.get(f"{TIKTOK_VIDEO_API_URL}{video_url}")
        
        # Ki·ªÉm tra response
        if response.status_code != 200:
            await update.message.reply_text(f"L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API. M√£ l·ªói: {response.status_code}")
            await processing_msg.delete()
            return
        
        # Parse JSON v√† log response ƒë·ªÉ debug
        try:
            data = response.json()
            logging.info(f"API Response: {json.dumps(data, indent=2)}")
        except json.JSONDecodeError:
            await update.message.reply_text("L·ªói: API tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá")
            await processing_msg.delete()
            return
        
        # Ki·ªÉm tra n·∫øu request th√†nh c√¥ng
        if data.get("code") != 0:
            await update.message.reply_text(f"L·ªói: {data.get('msg', 'Kh√¥ng t√¨m th·∫•y th√¥ng tin')}")
            await processing_msg.delete()
            return
        
        # L·∫•y th√¥ng tin video theo c·∫•u tr√∫c API m·ªõi
        video_data = data.get("data", {})
        
        # Ki·ªÉm tra xem data c√≥ c·∫•u tr√∫c m·ªõi kh√¥ng
        if "region" in video_data:
            # X·ª≠ l√Ω theo c·∫•u tr√∫c m·ªõi
            region = video_data.get("region", "N/A")
            title = video_data.get("title", "Kh√¥ng c√≥ m√¥ t·∫£")
            duration = video_data.get("duration", 0)
            play_url = video_data.get("play", "")
            cover_url = ""
            
            # L·∫•y cover URL t·ª´ c√°c ƒë·ªãnh d·∫°ng kh√°c nhau
            cover_data = video_data.get("cover", {})
            if isinstance(cover_data, dict):
                # ∆Øu ti√™n format l·ªõn nh·∫•t n·∫øu c√≥
                cover_formats = ["origin", "default", "r540"]
                for format in cover_formats:
                    if format in cover_data and cover_data[format]:
                        cover_url = cover_data[format]
                        break
            elif isinstance(cover_data, str):
                cover_url = cover_data
                
            # L·∫•y th√¥ng tin √¢m nh·∫°c
            music_info = video_data.get("music_info", {})
            music_title = "N/A"
            music_author = "N/A"
            
            if isinstance(music_info, dict):
                music_title = music_info.get("title", "N/A")
                music_author = music_info.get("author", "N/A")
            
            # L·∫•y th√¥ng tin th·ªëng k√™
            play_count = video_data.get("play_count", 0)
            digg_count = video_data.get("digg_count", 0)
            comment_count = video_data.get("comment_count", 0)
            share_count = video_data.get("share_count", 0)
            collect_count = video_data.get("collect_count", 0)
            
            # L·∫•y th√¥ng tin t√°c gi·∫£
            author_data = video_data.get("author", {})
            author_id = "N/A"
            author_name = "N/A"
            author_username = "N/A"
            
            if isinstance(author_data, dict):
                author_id = author_data.get("id", "N/A")
                author_name = author_data.get("nickname", "N/A")
                author_username = author_data.get("unique_id", "N/A")
            
            # T·∫°o tin nh·∫Øn th√¥ng tin video
            video_info = (
                f"üé¨ TH√îNG TIN VIDEO TIKTOK üé¨\n\n"
                f"üìù Ti√™u ƒë·ªÅ: {title}\n"
                f"‚è±Ô∏è Th·ªùi l∆∞·ª£ng: {duration} gi√¢y\n"
                f"üåç Khu v·ª±c: {region}\n"
            )
            
            # Th√¥ng tin t√°c gi·∫£
            author_info = (
                f"\nüë§ TH√îNG TIN T√ÅC GI·∫¢ üë§\n"
                f"üìõ Nickname: {author_name}\n"
                f"üÜî ID: {author_id}\n"
                f"üë®‚Äçüíª Username: @{author_username}\n"
            )
            
            # Th√¥ng tin v·ªÅ nh·∫°c
            music_info_text = (
                f"\nüéµ TH√îNG TIN NH·∫†C üéµ\n"
                f"üéµ T√™n b√†i h√°t: {music_title}\n"
                f"üë§ T√°c gi·∫£: {music_author}\n"
            )
            
            # Th√¥ng tin th·ªëng k√™
            stats_info = (
                f"\nüìä TH·ªêNG K√ä üìä\n"
                f"‚ù§Ô∏è L∆∞·ª£t th√≠ch: {digg_count:,}\n"
                f"üí¨ B√¨nh lu·∫≠n: {comment_count:,}\n"
                f"üîÑ Chia s·∫ª: {share_count:,}\n"
                f"üëÅÔ∏è L∆∞·ª£t xem: {play_count:,}\n"
                f"üì• ƒê√£ l∆∞u: {collect_count:,}\n"
            )
        else:
            # X·ª≠ l√Ω theo c·∫•u tr√∫c c≈©
            # ƒê·∫£m b·∫£o video_data l√† dictionary
            if not isinstance(video_data, dict):
                video_data = {}
                
            author_data = video_data.get("author", {})
            music_data = video_data.get("music", {})
            stats_data = video_data.get("stats", {})
            
            # ƒê·∫£m b·∫£o c√°c dictionary con ƒë·ªÅu h·ª£p l·ªá
            if not isinstance(author_data, dict):
                author_data = {}
            if not isinstance(music_data, dict):
                music_data = {}
            if not isinstance(stats_data, dict):
                stats_data = {}
            
            # X·ª≠ l√Ω th√¥ng tin video
            title = video_data.get("desc", "Kh√¥ng c√≥ m√¥ t·∫£")
            
            # ƒê·∫£m b·∫£o video object l√† dictionary
            video_obj = video_data.get("video", {})
            if not isinstance(video_obj, dict):
                video_obj = {}
                
            play_url = video_obj.get("downloadAddr", "")
            cover_url = video_obj.get("cover", "")
            dynamic_cover = video_obj.get("dynamicCover", "")
            duration = video_obj.get("duration", 0)
            
            if dynamic_cover:
                cover_url = dynamic_cover
            
            # T·∫°o tin nh·∫Øn th√¥ng tin video
            video_info = (
                f"üé¨ TH√îNG TIN VIDEO TIKTOK üé¨\n\n"
                f"üìù M√¥ t·∫£: {title}\n"
                f"‚è±Ô∏è Th·ªùi l∆∞·ª£ng: {duration} gi√¢y\n"
            )
            
            # Th√¥ng tin t√°c gi·∫£
            author_info = (
                f"\nüë§ TH√îNG TIN T√ÅC GI·∫¢ üë§\n"
                f"üìõ Nickname: {author_data.get('nickname', 'N/A')}\n"
                f"üÜî ID: {author_data.get('id', 'N/A')}\n"
                f"üë®‚Äçüíª Username: @{author_data.get('uniqueId', 'N/A')}\n"
                f"‚úÖ ƒê√£ x√°c minh: {'C√≥' if author_data.get('verified') else 'Kh√¥ng'}\n"
            )
            
            # Th√¥ng tin v·ªÅ nh·∫°c
            music_info_text = (
                f"\nüéµ TH√îNG TIN NH·∫†C üéµ\n"
                f"üéµ T√™n b√†i h√°t: {music_data.get('title', 'N/A')}\n"
                f"üë§ T√°c gi·∫£: {music_data.get('authorName', 'N/A')}\n"
                f"‚è±Ô∏è Th·ªùi l∆∞·ª£ng: {music_data.get('duration', 0)} gi√¢y\n"
            )
            
            # Th√¥ng tin th·ªëng k√™
            stats_info = (
                f"\nüìä TH·ªêNG K√ä üìä\n"
                f"‚ù§Ô∏è L∆∞·ª£t th√≠ch: {stats_data.get('diggCount', 0):,}\n"
                f"üí¨ B√¨nh lu·∫≠n: {stats_data.get('commentCount', 0):,}\n"
                f"üîÑ Chia s·∫ª: {stats_data.get('shareCount', 0):,}\n"
                f"üëÅÔ∏è L∆∞·ª£t xem: {stats_data.get('playCount', 0):,}\n"
                f"üì• ƒê√£ l∆∞u: {stats_data.get('collectCount', 0):,}\n"
            )
        
        # K·∫øt h·ª£p t·∫•t c·∫£ th√¥ng tin
        full_message = video_info + author_info + music_info_text + stats_info
        
        # Th√™m th√¥ng tin v·ªÅ th·ªùi gian x·ª≠ l√Ω API
        full_message += f"\n‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω: {data.get('processed_time', 'N/A')} gi√¢y"
        
        # N·∫øu c√≥ cover, g·ª≠i ·∫£nh k√®m theo text
        if cover_url:
            # Ki·ªÉm tra ƒë·ªô d√†i caption, n·∫øu qu√° d√†i th√¨ chia nh·ªè tin nh·∫Øn
            if len(full_message) > 1024:  # Telegram gi·ªõi h·∫°n caption t·ªëi ƒëa 1024 k√Ω t·ª±
                await update.message.reply_photo(
                    photo=cover_url,
                    caption=video_info[:1024]  # G·ª≠i ph·∫ßn ƒë·∫ßu v·ªõi ·∫£nh
                )
                # G·ª≠i ph·∫ßn c√≤n l·∫°i l√† text ri√™ng
                remaining_message = author_info + music_info_text + stats_info
                await update.message.reply_text(remaining_message)
            else:
                await update.message.reply_photo(
                    photo=cover_url,
                    caption=full_message
                )
        else:
            # N·∫øu kh√¥ng c√≥ avatar, g·ª≠i to√†n b·ªô d∆∞·ªõi d·∫°ng text
            await update.message.reply_text(full_message)
        
        # N·∫øu c√≥ URL video, g·ª≠i n√∫t ƒë·ªÉ t·∫£i v·ªÅ - ƒê√É C·∫¨P NH·∫¨T S·ª¨ D·ª§NG HTML HYPERLINK
        if play_url:
            await update.message.reply_text(
                f"üì• Link t·∫£i video: <a href=\"{play_url}\">b·∫•m v√†o ƒë√¢y</a>\n\n"
                f"üëâ B·∫°n c√≥ th·ªÉ t·∫£i tr·ª±c ti·∫øp video t·ª´ link tr√™n.",
                parse_mode="HTML"
            )
        
        # X√≥a tin nh·∫Øn ƒëang x·ª≠ l√Ω
        await processing_msg.delete()
        
    except Exception as e:
        logging.error(f"Error: {str(e)}")
        await update.message.reply_text(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")

async def increase_tiktok_followers(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """TƒÉng follow cho t√†i kho·∫£n TikTok."""
    if not await check_authorized_group(update, context):
        return
    try:
        # L·∫•y username t·ª´ tin nh·∫Øn
        if not context.args:
            await update.message.reply_text("Vui l√≤ng cung c·∫•p username TikTok. V√≠ d·ª•: /fl vietlegendc")
            return

        # L·∫•y username v√† x√≥a @ n·∫øu c√≥
        username = context.args[0].replace('@', '')
        
        # Th√¥ng b√°o ƒëang x·ª≠ l√Ω
        processing_msg = await update.message.reply_text(f"ƒêang tƒÉng follow cho {username}...")
        
        # G·ª≠i request ƒë·∫øn API
        response = requests.get(f"{TIKTOK_FOLLOW_API_URL}{username}")
        
        # Ki·ªÉm tra response
        if response.status_code != 200:
            await update.message.reply_text(f"L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API. M√£ l·ªói: {response.status_code}")
            await processing_msg.delete()
            return
        
        # Parse JSON
        try:
            data = response.json()
            logging.info(f"Follow API Response: {json.dumps(data, indent=2)}")
        except json.JSONDecodeError:
            await update.message.reply_text("L·ªói: API tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá")
            await processing_msg.delete()
            return
        
        # Ki·ªÉm tra status "wait"
        if "status" in data and data["status"] == "wait":
            wait_message = data.get("message", "Vui l√≤ng ƒë·ª£i m·ªôt kho·∫£ng th·ªùi gian tr∆∞·ªõc khi th·ª≠ l·∫°i.")
            owner_info = data.get("owner", "")
            
            # T·∫°o th√¥ng b√°o ch·ªù ƒë·ª£i
            wait_response = (
                f"‚è≥ Y√äU C·∫¶U C·∫¶N CH·ªú ‚è≥\n\n"
                f"üë§ Username: @{username}\n"
                f"üìù Th√¥ng b√°o: {wait_message}\n"
            )
            
            # Th√™m th√¥ng tin v·ªÅ ch·ªß s·ªü h·ªØu n·∫øu c√≥
            if owner_info:
                wait_response += f"üë®‚Äçüíª Li√™n h·ªá: @vietanhzzz\n"
                
            await update.message.reply_text(wait_response)
            await processing_msg.delete()
            return
            
        # Ki·ªÉm tra response t·ª´ API v√† t·∫°o th√¥ng b√°o ph√π h·ª£p
        if "code" in data:
            # N·∫øu API tr·∫£ v·ªÅ code
            if data.get("code") == 0 or data.get("code") == 200:
                # Th√†nh c√¥ng
                success_message = (
                    f"‚úÖ TƒÇNG FOLLOW TH√ÄNH C√îNG ‚úÖ\n\n"
                    f"üë§ Username: @{username}\n"
                )
                
                # Th√™m th√¥ng tin s·ªë l∆∞·ª£ng follow ƒë√£ tƒÉng n·∫øu c√≥
                if "data" in data and "follower_count" in data["data"]:
                    success_message += f"üë• S·ªë follow ƒë√£ tƒÉng: {data['data']['follower_count']:,}\n"
                
                # Th√™m th√¥ng tin th·ªùi gian x·ª≠ l√Ω n·∫øu c√≥
                if "processed_time" in data:
                    success_message += f"‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω: {data['processed_time']} gi√¢y\n"
                
                await update.message.reply_text(success_message)
            else:
                # Th·∫•t b·∫°i v·ªõi m√£ l·ªói
                error_msg = data.get("msg", "Kh√¥ng r√µ l·ªói")
                await update.message.reply_text(f"‚ùå L·ªói: {error_msg}")
        elif "success" in data:
            # N·∫øu API tr·∫£ v·ªÅ success
            if data.get("success") == True:
                success_message = (
                    f"‚úÖ TƒÇNG FOLLOW TH√ÄNH C√îNG ‚úÖ\n\n"
                    f"üë§ Username: @{username}\n"
                )
                
                # Th√™m th√¥ng tin t·ª´ response n·∫øu c√≥
                if "message" in data:
                    success_message += f"üìù Th√¥ng b√°o: {data['message']}\n"
                
                # Th√™m th√¥ng tin s·ªë l∆∞·ª£ng follow n·∫øu c√≥
                if "data" in data and isinstance(data["data"], dict):
                    if "follower_count" in data["data"]:
                        success_message += f"üë• S·ªë follow ƒë√£ tƒÉng: {data['data']['follower_count']:,}\n"
                
                await update.message.reply_text(success_message)
            else:
                # Th·∫•t b·∫°i
                error_msg = data.get("message", "Kh√¥ng th·ªÉ tƒÉng follow")
                await update.message.reply_text(f"‚ùå L·ªói: {error_msg}")
        else:
            # Kh√¥ng c√≥ m·∫´u response ti√™u chu·∫©n, tr·∫£ v·ªÅ th√¥ng b√°o chung
            await update.message.reply_text(
                f"‚úÖ ƒê√£ g·ª≠i y√™u c·∫ßu tƒÉng follow cho @{username}\n\n"
                f"üëâ Vui l√≤ng ki·ªÉm tra t√†i kho·∫£n TikTok sau v√†i ph√∫t ƒë·ªÉ xem k·∫øt qu·∫£."
            )
        
        # X√≥a tin nh·∫Øn ƒëang x·ª≠ l√Ω
        await processing_msg.delete()
        
    except Exception as e:
        logging.error(f"Error: {str(e)}")
        await update.message.reply_text(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")

async def get_freefire_outfit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """L·∫•y v√† hi·ªÉn th·ªã ·∫£nh trang ph·ª•c Free Fire."""
    if not await check_authorized_group(update, context):
        return
    try:
        # L·∫•y UID t·ª´ tin nh·∫Øn
        if not context.args:
            await update.message.reply_text("Vui l√≤ng cung c·∫•p UID Free Fire. V√≠ d·ª•: /tpff 833822096")
            return

        # L·∫•y UID
        uid = context.args[0]
        
        # Ki·ªÉm tra UID c√≥ ph·∫£i l√† s·ªë kh√¥ng
        if not uid.isdigit():
            await update.message.reply_text("UID kh√¥ng h·ª£p l·ªá. UID ph·∫£i l√† m·ªôt d√£y s·ªë.")
            return
        
        # Th√¥ng b√°o ƒëang x·ª≠ l√Ω
        processing_msg = await update.message.reply_text(f"ƒêang l·∫•y th√¥ng tin trang ph·ª•c Free Fire cho UID {uid}...")
        
        # T·∫°o URL API v·ªõi region m·∫∑c ƒë·ªãnh l√† "vn"
        api_url = f"{FREEFIRE_OUTFIT_API_URL}{uid}&key={FREEFIRE_API_KEY}"
        
        logging.info(f"Requesting Free Fire outfit API: {api_url}")
        
        # G·ª≠i request ƒë·∫øn API
        response = requests.get(api_url)
        
        # Ki·ªÉm tra response
        if response.status_code != 200:
            await update.message.reply_text(f"L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API. M√£ l·ªói: {response.status_code}")
            await processing_msg.delete()
            return
        
        # Ki·ªÉm tra content type
        content_type = response.headers.get('Content-Type', '')

        # Ki·ªÉm tra xem response c√≥ ph·∫£i l√† h√¨nh ·∫£nh hay kh√¥ng
        if 'image' in content_type:
            # N·∫øu l√† h√¨nh ·∫£nh, g·ª≠i tr·ª±c ti·∫øp
            await update.message.reply_photo(
                photo=response.content,
                caption=f"üéÆ TRANG PH·ª§C FREE FIRE üéÆ\n\nüë§ UID: {uid}\nüåç Region: vn"
            )
        else:
            # N·∫øu kh√¥ng ph·∫£i h√¨nh ·∫£nh, th·ª≠ parse d∆∞·ªõi d·∫°ng JSON
            try:
                data = response.json()
                logging.info(f"Free Fire API Response: {json.dumps(data, indent=2)}")
                
                # Ki·ªÉm tra l·ªói
                if data.get("error"):
                    await update.message.reply_text(f"‚ùå L·ªói: {data.get('message', 'Kh√¥ng t√¨m th·∫•y th√¥ng tin')}")
                elif data.get("url"):
                    # N·∫øu c√≥ URL h√¨nh ·∫£nh, g·ª≠i h√¨nh ·∫£nh
                    await update.message.reply_photo(
                        photo=data.get("url"),
                        caption=f"üéÆ TRANG PH·ª§C FREE FIRE üéÆ\n\nüë§ UID: {uid}\nüåç Region: vn\nüë§ Nickname: {data.get('nickname', 'N/A')}"
                    )
                else:
                    await update.message.reply_text("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin trang ph·ª•c.")
            except json.JSONDecodeError:
                await update.message.reply_text("API tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng.")

        # X√≥a tin nh·∫Øn ƒëang x·ª≠ l√Ω
        await processing_msg.delete()
        
    except Exception as e:
        logging.error(f"Error: {str(e)}")
        await update.message.reply_text(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
async def get_facebook_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """L·∫•y v√† hi·ªÉn th·ªã th√¥ng tin t√†i kho·∫£n Facebook."""
    if not await check_authorized_group(update, context):
        return
    try:
        # L·∫•y link t·ª´ tin nh·∫Øn
        if not context.args:
            await update.message.reply_text("Vui l√≤ng cung c·∫•p link Facebook.\n V√≠ d·ª•: /fb https://www.facebook.com/VietLegendc")
            return

        # L·∫•y link Facebook
        facebook_link = context.args[0]
        
        # Ki·ªÉm tra link c√≥ ch·ª©a facebook kh√¥ng
        if not re.search(r'facebook\.com', facebook_link):
            await update.message.reply_text("Link kh√¥ng h·ª£p l·ªá. Vui l√≤ng cung c·∫•p link Facebook h·ª£p l·ªá.")
            return
        
        # Th√¥ng b√°o ƒëang x·ª≠ l√Ω
        processing_msg = await update.message.reply_text("ƒêang l·∫•y th√¥ng tin Facebook...")
        
        # G·ª≠i request ƒë·∫øn API
        api_url = f"https://api.ffcommunity.site/getID.php?linkFB={facebook_link}"
        response = requests.get(api_url)
        
        # Ki·ªÉm tra response
        if response.status_code != 200:
            await update.message.reply_text(f"L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API. M√£ l·ªói: {response.status_code}")
            await processing_msg.delete()
            return
        
        # Parse JSON
        try:
            data = response.json()
        except json.JSONDecodeError:
            await update.message.reply_text("L·ªói: API tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá")
            await processing_msg.delete()
            return
        
        # Ki·ªÉm tra n·∫øu request th√†nh c√¥ng
        if data.get("error") != 0:
            await update.message.reply_text(f"L·ªói: {data.get('msg', 'Kh√¥ng t√¨m th·∫•y th√¥ng tin')}")
            await processing_msg.delete()
            return
        
        # T·∫°o tin nh·∫Øn th√¥ng tin Facebook
        info_message = (
            f"‚úÖ TH√îNG TIN FACEBOOK ‚úÖ\n\n"
            f"üÜî ID: {data.get('id', 'N/A')}\n"
            f"üë§ T√™n: {data.get('name', 'N/A')}\n"
            f"üîó Link: {facebook_link}"
        )
        
        # G·ª≠i th√¥ng tin
        await update.message.reply_text(info_message)
        
        # X√≥a tin nh·∫Øn ƒëang x·ª≠ l√Ω
        await processing_msg.delete()
        
    except Exception as e:
        logging.error(f"Error: {str(e)}")
        await update.message.reply_text(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
async def get_freefire_views(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """TƒÉng l∆∞·ª£t xem cho t√†i kho·∫£n Free Fire."""
    if not await check_authorized_group(update, context):
        return
    try:
        # L·∫•y UID t·ª´ tin nh·∫Øn
        if not context.args:
            await update.message.reply_text("Vui l√≤ng cung c·∫•p UID Free Fire. V√≠ d·ª•: /viewff 833822096")
            return

        # L·∫•y UID
        uid = context.args[0]
        
        # Ki·ªÉm tra UID c√≥ ph·∫£i l√† s·ªë kh√¥ng
        if not uid.isdigit():
            await update.message.reply_text("UID kh√¥ng h·ª£p l·ªá. UID ph·∫£i l√† m·ªôt d√£y s·ªë.")
            return
        
        # Th√¥ng b√°o ƒëang x·ª≠ l√Ω
        processing_msg = await update.message.reply_text(f"ƒêang g·ª≠i l∆∞·ª£t xem cho UID Free Fire {uid}...")
        
        # T·∫°o URL API v·ªõi region m·∫∑c ƒë·ªãnh l√† "vn"
        api_url = f"https://visits-lk-tm-v2.vercel.app/{uid}"
        
        logging.info(f"Requesting Free Fire view API: {api_url}")
        
        # G·ª≠i request ƒë·∫øn API
        response = requests.get(api_url)
        
        # Ki·ªÉm tra response
        if response.status_code != 200:
            await update.message.reply_text(f"L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API. M√£ l·ªói: {response.status_code}")
            await processing_msg.delete()
            return
        
        # Parse JSON
        try:
            data = response.json()
            logging.info(f"Free Fire View API Response: {json.dumps(data, indent=2)}")
            
            # T·∫°o tin nh·∫Øn th√†nh c√¥ng
            success_message = (
                f"‚úÖ TƒÇNG VIEW FREE FIRE TH√ÄNH C√îNG ‚úÖ\n\n"
                f"üë§ UID: {uid}\n"
                f"üåç Region: vn\n"
            )
            
            # Th√™m th√¥ng b√°o t·ª´ API n·∫øu c√≥
            if "message" in data:
                success_message += f"üìù Th√¥ng b√°o: {data.get('message')}\n"
            
            # Th√™m th√¥ng tin nh√≥m n·∫øu c√≥
            if "group" in data:
                success_message += f"üë• Nh√≥m: t.me/vmod123z\n"
            
            # Th√™m th√¥ng tin li√™n h·ªá ch·ªß s·ªü h·ªØu
            success_message += f"üë®‚Äçüíª Li√™n h·ªá: @vietanhzzz\n"
            
            await update.message.reply_text(success_message)
            
        except json.JSONDecodeError:
            await update.message.reply_text("L·ªói: API tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá")
        
        # X√≥a tin nh·∫Øn ƒëang x·ª≠ l√Ω
        await processing_msg.delete()
        
    except Exception as e:
        logging.error(f"Error: {str(e)}")
        await update.message.reply_text(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")        
async def get_freefire_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """L·∫•y v√† hi·ªÉn th·ªã th√¥ng tin t√†i kho·∫£n Free Fire."""
    if not await check_authorized_group(update, context):
        return
    try:
        # L·∫•y UID t·ª´ tin nh·∫Øn
        if not context.args:
            await update.message.reply_text("Vui l√≤ng cung c·∫•p UID Free Fire. V√≠ d·ª•: /infoff 833822096")
            return

        # L·∫•y UID
        uid = context.args[0]
        
        # Ki·ªÉm tra UID c√≥ ph·∫£i l√† s·ªë kh√¥ng
        if not uid.isdigit():
            await update.message.reply_text("UID kh√¥ng h·ª£p l·ªá. UID ph·∫£i l√† m·ªôt d√£y s·ªë.")
            return
        
        # Th√¥ng b√°o ƒëang x·ª≠ l√Ω
        processing_msg = await update.message.reply_text(f"ƒêang l·∫•y th√¥ng tin Free Fire cho UID {uid}...")
        
        # T·∫°o URL API v·ªõi region m·∫∑c ƒë·ªãnh l√† "vn"
        api_url = f"https://infoffvip.vercel.app/info?region=vn&uid={uid}"
        
        logging.info(f"Requesting Free Fire info API: {api_url}")
        
        # G·ª≠i request ƒë·∫øn API
        response = requests.get(api_url)
        
        # Ki·ªÉm tra response
        if response.status_code != 200:
            await update.message.reply_text(f"L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn API. M√£ l·ªói: {response.status_code}")
            await processing_msg.delete()
            return
        
        # Parse JSON
        try:
            data = response.json()
            logging.info(f"Free Fire Info API Response: {json.dumps(data, indent=2)}")
            
            # Ki·ªÉm tra l·ªói trong API response
            if data.get("error"):
                await update.message.reply_text(f"‚ùå L·ªói: {data.get('message', 'Kh√¥ng t√¨m th·∫•y th√¥ng tin')}")
                await processing_msg.delete()
                return
            
            # L·∫•y c√°c th√¥ng tin c∆° b·∫£n
            basic_info = data.get("basicInfo", {})
            pet_info = data.get("petInfo", {})
            social_info = data.get("socialInfo", {})
            
            # Chuy·ªÉn ƒë·ªïi timestamp th√†nh ng√†y th√°ng nƒÉm n·∫øu c√≥
            create_date = "N/A"
            last_login = "N/A"
            
            if "createAt" in basic_info and basic_info["createAt"]:
                try:
                    create_timestamp = int(basic_info["createAt"])
                    create_date = datetime.datetime.fromtimestamp(create_timestamp).strftime('%d/%m/%Y')
                except:
                    create_date = str(basic_info["createAt"])
            
            if "lastLoginAt" in basic_info and basic_info["lastLoginAt"]:
                try:
                    login_timestamp = int(basic_info["lastLoginAt"])
                    last_login = datetime.datetime.fromtimestamp(login_timestamp).strftime('%d/%m/%Y')
                except:
                    last_login = str(basic_info["lastLoginAt"])
            
            # X√°c ƒë·ªãnh gi·ªõi t√≠nh
            gender = "Nam" if social_info.get("gender") == "Gender_MALE" else "N·ªØ" if social_info.get("gender") == "Gender_FEMALE" else social_info.get("gender", "N/A")
            
            # T·∫°o th√¥ng tin c∆° b·∫£n
            info_message = (
                f"üéÆ TH√îNG TIN FREE FIRE üéÆ\n\n"
                f"üìä TH√îNG TIN C∆† B·∫¢N üìä\n"
                f"üÜî ID: {basic_info.get('uid', uid)}\n"
                f"üë§ Nickname: {basic_info.get('nickname', 'N/A')}\n"
                f"üèÜ Level: {basic_info.get('level', 'N/A')}\n"
                f"üåç Khu v·ª±c: {basic_info.get('region', 'VN')}\n"
                f"üìÖ Ng√†y t·∫°o: {create_date}\n"
                f"üïí ƒêƒÉng nh·∫≠p cu·ªëi: {last_login}\n"
                f"‚≠ê Kinh nghi·ªám: {format(int(basic_info.get('exp', 0)), ',')}\n"
                f"üèÖ X·∫øp h·∫°ng: {basic_info.get('rank', 'N/A')}\n"
                f"üìà ƒêi·ªÉm x·∫øp h·∫°ng: {format(int(basic_info.get('rankingPoints', 0)), ',')}\n"
                f"üëç L∆∞·ª£t th√≠ch: {format(int(basic_info.get('liked', 0)), ',')}\n"
                f"üèÜ M√πa: {basic_info.get('seasonId', 'N/A')}\n"
            )
            
            # Th√™m th√¥ng tin th√∫ c∆∞ng n·∫øu c√≥
            if pet_info:
                pet_message = (
                    f"\nüêæ TH√îNG TIN TH√ö C∆ØNG üêæ\n"
                    f"üÜî ID: {pet_info.get('id', 'N/A')}\n"
                    f"üìõ T√™n: {pet_info.get('name', 'N/A')}\n"
                    f"üèÜ Level: {pet_info.get('level', 'N/A')}\n"
                    f"‚≠ê Kinh nghi·ªám: {format(int(pet_info.get('exp', 0)), ',')}\n"
                )
                info_message += pet_message
            
            # Th√™m th√¥ng tin x√£ h·ªôi
            if social_info:
                social_message = (
                    f"\nüë• TH√îNG TIN X√É H·ªòI üë•\n"
                    f"üë§ Gi·ªõi t√≠nh: {gender}\n"
                    f"üåê Ng√¥n ng·ªØ: {social_info.get('language', 'N/A')}\n"
                    f"üéÆ Ch·∫ø ƒë·ªô y√™u th√≠ch: {social_info.get('modePrefer', 'N/A')}\n"
                    f"üèÜ Hi·ªÉn th·ªã x·∫øp h·∫°ng: {social_info.get('rankShow', 'N/A')}\n"
                )
                
                # Th√™m ch·ªØ k√Ω n·∫øu c√≥
                if "signature" in social_info and social_info["signature"]:
                    social_message += f"‚úèÔ∏è Ch·ªØ k√Ω: \"{social_info['signature']}\"\n"
                
                info_message += social_message
            
            # G·ª≠i th√¥ng tin
            await update.message.reply_text(info_message)
            
        except json.JSONDecodeError:
            await update.message.reply_text("L·ªói: API tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá")
        except Exception as e:
            logging.error(f"Error parsing API response: {str(e)}")
            await update.message.reply_text(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {str(e)}")
        
        # X√≥a tin nh·∫Øn ƒëang x·ª≠ l√Ω
        await processing_msg.delete()
        
    except Exception as e:
        logging.error(f"Error: {str(e)}")
        await update.message.reply_text(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
async def addfr(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Spam friend request cho t√†i kho·∫£n."""
    if not await check_authorized_group(update, context):
        return
    try:
        # Ki·ªÉm tra arguments
        if not context.args:
            await update.message.reply_text("‚ö†Ô∏è Vui l√≤ng nh·∫≠p UID.\nV√≠ d·ª•: /addfr 12345678", 
                                           reply_to_message_id=update.message.message_id)
            return

        uid = context.args[0]
        
        # Th√¥ng b√°o ƒëang x·ª≠ l√Ω
        processing_msg = await update.message.reply_text(f"ƒêang spam friend cho UID {uid}...")
        
        # G·ª≠i request ƒë·∫øn API
        url = f"https://spamfriend.vercel.app/addfriend?uid={uid}"
        logging.info(f"Requesting spam friend API: {url}")
        
        response = requests.get(url)
        
        # Ki·ªÉm tra response
        if response.status_code != 200:
            await update.message.reply_text("‚ùå L·ªói k·∫øt n·ªëi ƒë·∫øn API. Vui l√≤ng th·ª≠ l·∫°i sau.", 
                                          reply_to_message_id=update.message.message_id)
            await processing_msg.delete()
            return
            
        # Parse JSON
        try:
            data = response.json()
            logging.info(f"Spam Friend API Response: {json.dumps(data, indent=2)}")
            
            if "status" in data and data["status"] == 0:
                await update.message.reply_text("‚ùå L·ªói. Ki·ªÉm tra UID ho·∫∑c th·ª≠ l·∫°i sau.", 
                                              reply_to_message_id=update.message.message_id)
                await processing_msg.delete()
                return
            
            # L·∫•y th√¥ng tin
            nickname = data.get("nickname", "Kh√¥ng r√µ")
            level = data.get("level", "Kh√¥ng r√µ")
            region = data.get("region", "Kh√¥ng r√µ")
            success_count = data.get("success_count", 0)
            sender_name = update.message.from_user.first_name
            
            # T·∫°o tin nh·∫Øn th√†nh c√¥ng
            success_message = (
                f"üî• **Spam th√†nh c√¥ng** üî•\n\n"
                f"- **Ng∆∞·ªùi Ch∆°i:** ` {nickname}`\n"
                f"- **UID:** `{uid}`\n"
                f"- **Khu v·ª±c:** `{region}`\n"
                f"- **C·∫•p ƒë·ªô:** `{level}`\n"
                f"- **S·ªë l∆∞·ª£ng:** `{success_count}`\n\n"
                f"**‚ò†Ô∏èNg∆∞·ªùi g·ª≠i:** {sender_name}"
            )
            
            await update.message.reply_text(success_message, 
                                         parse_mode="HTML", 
                                         reply_to_message_id=update.message.message_id)
                                         
        except json.JSONDecodeError:
            await update.message.reply_text("‚ùå API tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá")
            
        # X√≥a tin nh·∫Øn ƒëang x·ª≠ l√Ω
        await processing_msg.delete()
        
    except Exception as e:
        logging.error(f"Error: {str(e)}")
        await update.message.reply_text("‚ùå ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.",
                                     reply_to_message_id=update.message.message_id)
def main() -> None:
    """Kh·ªüi ƒë·ªông bot."""
    try:
        # T·∫°o ·ª©ng d·ª•ng v√† l·∫•y token
        application = Application.builder().token(TOKEN).build()

        # Th√™m c√°c handler
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("infotiktok", get_tiktok_info))
        application.add_handler(CommandHandler("videotiktok", get_tiktok_video_info))
        application.add_handler(CommandHandler("fl", increase_tiktok_followers))
        application.add_handler(CommandHandler("tpff", get_freefire_outfit))
        application.add_handler(CommandHandler("fb", get_facebook_info))
        application.add_handler(CommandHandler("viewff", get_freefire_views))
        application.add_handler(CommandHandler("infoff", get_freefire_info))
        application.add_handler(CommandHandler("addfr", addfr))

        # Kh·ªüi ƒë·ªông bot
        print("Bot ƒëang kh·ªüi ƒë·ªông...")
        application.run_polling()
    except Exception as e:
        print(f"L·ªói khi kh·ªüi ƒë·ªông bot: {str(e)}")

if __name__ == "__main__":
    main()